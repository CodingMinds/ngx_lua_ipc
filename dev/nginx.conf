#!/bin/sh #good enough highlighting
#load_module "nginx-nchan/pkg/nginx-nchan-dev/etc/nginx/modules/ngx_nchan_module.so";
#user  nobody;
worker_processes      20;
working_directory     /tmp;

worker_rlimit_core    1024M;
worker_rlimit_nofile  100000;
#debug_points stop;

error_log             /dev/stderr;

pid                   /tmp/nchan-test-nginx.pid;
daemon                off;


events {
  worker_connections  50000;
  accept_mutex on;
}

stream {
  init_worker_by_lua_block {
    local ipc = require "ngx.ipc"
    ipc.receive("streamy", function(data)
      print("got streamy data " .. data)
    end)
  }

  server {
    listen 8888;
    
    content_by_lua_block {
      local ipc = require "ngx.ipc"
      local sock, err = ngx.socket.tcp()
      if sock then
          ngx.log(ngx.ERR,"about to resolve address")
          local res, err = sock:connect("google.com", 80)
          if res then
              ngx.log(ngx.ERR,"ok")
          end
      end
      if err then ngx.log(ngx.ERR,err) end
      ngx.log(ngx.ERR,"bye")

    }
  }
}

http {
  access_log /dev/stdout;
#  access_log /dev/stdout;
  default_type  application/octet-stream;
  client_body_temp_path /tmp/ 1 2;
  sendfile        on;
  keepalive_timeout  65;
  client_max_body_size 100m;
  #client_body_in_file_only clean;
  #client_body_buffer_size 32K;
  
  #cachetag
  
  init_worker_by_lua_block {
    local ipc = require "ngx.ipc"
    
    ipc.receive({
      hello = function(data)
        ngx.log(ngx.ALERT, ("%d says %s"):format(ipc.sender.process, data))
        ipc.reply("reply", "kthx")
      end,
      reply = function(data)
        ngx.log(ngx.ALERT, ("%d has replied %s"):format(ipc.sender.process, data))
      end
    })
  }
  
  server {
    listen       8082;
    listen       8085   http2;
    #listen      18010;
    #    root ./;
    
    location ~ /send/(\d+)/(.*)$ {
      set $dst_pid $1;
      set $data $2;
      content_by_lua_block {
        local ipc = require "ngx.ipc"
        ipc.send(ngx.var.dst_pid, "hello", ngx.var.data)
      }
    }
    
    location ~ /broadcast/(.*)$ {
      set $data $1;
      content_by_lua_block {
        local ipc = require "ngx.ipc"
        ipc.broadcast({}, ngx.var.data)
      }
    }
    
  }
}
