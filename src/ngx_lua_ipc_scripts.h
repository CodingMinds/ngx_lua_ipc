// don't edit this please, it was auto-generated by hsss
// https://github.com/slact/hsss

typedef struct {
  // crazy timer hack
  char *hacktimer;

  char *reply;

} ngx_ipc_lua_scripts_t;

ngx_ipc_lua_scripts_t ngx_ipc_lua_scripts = {
  //hacktimer
  "-- crazy timer hack\n"
  "local ipc = require \"ngx.ipc\"\n"
  "local handlers = ipc.handlers\n"
  "local timerhack = nil\n"
  "local pending_alerts = nil\n"
  "local timer_handler\n"
  "timer_handler = function(premature)\n"
  "  \n"
  "  local sender = {} -- for \"ngx.ipc.reply\" convenience function\n"
  "  ipc.sender = sender\n"
  "  \n"
  "  for src_slot, src_pid, name, data in pending_alerts do\n"
  "    \n"
  "    sender.slot = src_slot\n"
  "    sender.process = src_pid\n"
  "    \n"
  "    local handler = handlers[name]\n"
  "    if handler then\n"
  "      handler(src_pid, data)\n"
  "    elseif ipc.default_handler then\n"
  "      ipc.default_handler(src_pid, name, data)\n"
  "    end\n"
  "  end\n"
  "  \n"
  "  ipc.sender = nil\n"
  "  --add timer again and hack it\n"
  "  timerhack(timer_handler)\n"
  "end\n"
  "\n"
  "return function(pending_alerts_func, timerhack_func)\n"
  "  pending_alerts = pending_alerts_func\n"
  "  timerhack = timerhack_func\n"
  "  timerhack(timer_handler)\n"
  "end\n",

  //reply
  "return function(ipc)\n"
  "  return function(name, data)\n"
  "    if not ipc.sender then\n"
  "      error(\"Can't reply, function called outside of IPC alert handler.\")\n"
  "    end\n"
  "    return ipc.send(ipc.sender.process, name, data)\n"
  "  end  \n"
  "end\n"
};

